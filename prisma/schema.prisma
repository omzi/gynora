generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  Role                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationCode {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  code    String   @unique
  expires DateTime

  @@unique([email, code])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum LogType {
  MOOD
}

model UserData {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  dateOfBirth       DateTime
  gender            Gender
  mentalHealthGoals String[]
  toneFocus         Int
  responseStyle     Int
  approachType      Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  logs              Log[]
  chats             Chat[]
  affirmations      Affirmation[]

  @@unique([userId])
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      LogType
  notes     String?
  // TODO: Populate...
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      UserData @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  name      String
  messages  Message[]
  feedback  Feedback?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      UserData  @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      String
  content   String
  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([chatId])
}

enum Tone {
  MOTIVATING
  ENCOURAGING
  EMPOWERING
  SOOTHING
  REFLECTIVE
}

enum Complexity {
  SIMPLE
  MODERATE
  COMPLEX
}

enum Timeframe {
  PRESENT_FOCUSED
  FUTURE_ORIENTED
  PAST_TRANSCENDING
}

model Affirmation {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  userId             String     @db.ObjectId
  content            String
  subtitle           String
  voice              String     @default("echo")
  audioUrl           String
  category           String
  culturalBackground String?
  tone               Tone       @default(MOTIVATING)
  sentenceCount      Int // Number of sentences
  sentenceComplexity Complexity @default(SIMPLE)
  timeframe          Timeframe  @default(PRESENT_FOCUSED)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               UserData   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
